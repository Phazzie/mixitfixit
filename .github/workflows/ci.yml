name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        id: cache-client-deps
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        if: steps.cache-client-deps.outputs.cache-hit != 'true'
        working-directory: ./client
        run: npm ci

      - name: Run Client Linters
        working-directory: ./client
        run: npx eslint "src/**/*.js"

      - name: Cache Server Dependencies
        id: cache-server-deps
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        if: steps.cache-server-deps.outputs.cache-hit != 'true'
        working-directory: ./server
        run: npm ci

      - name: Run Server Linters
        working-directory: ./server
        run: npx eslint "src/**/*.js"

  test-client:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm ci

      - name: Run Client Tests with Coverage
        working-directory: ./client
        run: npm test -- --coverage

      - name: Upload Client Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: client-test-report-${{ matrix.os }}
          path: client/coverage # Adjust path if needed

  test-server:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Server Dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        working-directory: ./server
        run: npm ci

      - name: Run Server Tests with Coverage
        working-directory: ./server
        run: npm test -- --coverage

      - name: Upload Server Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-test-report-${{ matrix.os }}
          path: server/coverage # Adjust path if needed

  codecov:
    runs-on: ubuntu-latest
    needs: [test-client, test-server]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  codeql:
    needs: [lint, test-client, test-server]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysisname: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        id: cache-client-deps
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        if: steps.cache-client-deps.outputs.cache-hit != 'true'
        working-directory: ./client
        run: npm ci

      - name: Run Client Linters
        working-directory: ./client
        run: npx eslint "src/**/*.js"

      - name: Cache Server Dependencies
        id: cache-server-deps
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        if: steps.cache-server-deps.outputs.cache-hit != 'true'
        working-directory: ./server
        run: npm ci

      - name: Run Server Linters
        working-directory: ./server
        run: npx eslint "src/**/*.js"

  test-client:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm ci

      - name: Run Client Tests with Coverage
        working-directory: ./client
        run: npm test -- --coverage

      - name: Upload Client Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: client-test-report-${{ matrix.os }}
          path: client/coverage # Adjust path if needed

  test-server:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Server Dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        working-directory: ./server
        run: npm ci

      - name: Run Server Tests with Coverage
        working-directory: ./server
        run: npm test -- --coverage

      - name: Upload Server Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-test-report-${{ matrix.os }}
          path: server/coverage # Adjust path if needed

  codecov:
    runs-on: ubuntu-latest
    needs: [test-client, test-server]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  codeql:
    needs: [lint, test-client, test-server]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  docs:
    runs-on: ubuntu-latest
    needs: [lint, test-client, test-server]
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Cache Server Dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        working-directory: ./server
        run: npm ci

      - name: Generate JSDoc Documentation
        run: npm run docs

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jsdoc-documentation
          path: docs

        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  docs:
    runs-on: ubuntu-latest
    needs: [lint, test-client, test-server]
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Client Dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-deps-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-deps-

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Cache Server Dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-deps-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-deps-

      - name: Install Server Dependencies
        working-directory: ./server
        run: npm ci

      - name: Generate JSDoc Documentation
        run: npm run docs

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jsdoc-documentation
          path: docs
